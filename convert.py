# converts a Walmart / Sam's Barcode to a TC number
# written by Ivan Kirk 2023


CODE39 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/%+"
BASE = 770703657979556619143070 #24 digits


# treats the barcode as a base 43 number and converts it to base 10
def convertBarcodeToNumber(barcode: str):
    c = 0
    for i in range(len(barcode)):
        index = len(barcode) - i - 1
        character = barcode[index]
        c += CODE39.find(character) * pow(len(CODE39), i)
    return c


# converts barcode decimal number into a base 43 barcode string
def convertNumberToBarcode(barcodeNumber: int):
    c = ""
    while barcodeNumber > 0:
        c += CODE39[barcodeNumber % len(CODE39)]
        barcodeNumber //= len(CODE39)
    return c[::-1]




# returns the correct TC number given a barcode
def getTC(barcode: str):

    if len(barcode) != 16:
        raise Exception("Barcode must be 16 Characters long")

    barcodeNumber = convertBarcodeToNumber(barcode)
    barcodeNumber -= BASE

    #find how many digits the TC number has
    numDigits = barcodeNumber // pow(10, 24) - 31

    #find the raw TC number
    TC = str(barcodeNumber % pow(10, 24))

    #pad the TC number with zeros if neccessary
    TC = ((numDigits - len(TC)) * "0") + TC

    #return the TC number
    return TC



#returns the correct barcode given a TC number
def getBarcode(TC: str):

    if type(TC) != str:
        raise Exception("TC number must be a string")

    #create the base barcode number from the length of the TC number
    barcodeBase = str((31 + len(TC))) + str(BASE)

    #add the TC number to this base
    barcodeNumber = int(barcodeBase) + int(TC)

    #convert it to the actual barcode
    barcode = convertNumberToBarcode(barcodeNumber)

    return barcode



"""
        HOW A TC NUMBER MAPS TO A WALMART BARCODE by Ivan Kirk

The barcode is always a 16-digit code39 string.
The code39 character set is "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/%+",
    which is a 43 digit character set.
If you treat the barcode as a base 43 number with the numeric order listed above,
    you can convert this number to decimal as you would from hex to decimal.
Walmart maps TC numbers to a barcode based on how long the TC number is.
Each length of a TC has its own pocket of values in the converted barcode number
    in which it maps 1 to 1 starting from a base value.
The base value is described by this formula:

    base = ((31 + len(TC)) * (10 ^ 24) + 770703657979556619143070

    

For example, if you had a TC number that was 00000000000000000001
    -that's 19 zeros and a 1, for 20 total digits

Since there are 20 digits the formula is this:
    base = (31 + 20) * (10 ^ 24) + 770703657979556619143070
    base = 51770703657979556619143070

The TC number now maps one to one from this base. So, simply add the TC number
    to the base (the TC number's value is just 1)
    barcodeNumber = base + TC
    barodeNumber = 51770703657979556619143070 + 1
    barodeNumber = 51770703657979556619143071

Now we have the barcode number, which as I said before, is generated by treating
    the barcode data as a base 43 number and converting it to decimal.
You can convert the decimal back to the base 43, which in this case would result
    in the value "GCTS5FY7J4%K5X96" for the TC number 00000000000000000001.

    


You can do this process in reverse to get the TC number from the barcode.
Start with the barcode "GCTS5FY7J4%K5X96" and treat it as a base 43 number.
Convert it to decimal with the specific numeric order listed above.
This should result in 51770703657979556619143071.

Subtract the constant value of 770703657979556619143070 (which is just part of
    walmart's formula to make the TC number) to get this:
    51000000000000000000000001

now you can take the first 2 digits and subtract 31 to get the length of the
    TC number. 51 - 31 = 20 digits.
The rest of the number is just 1, which is your unpadded TC number.
Simply add the other 19 zeros, since you need the TC number to be 20 digits long.
the result is: 00000000000000000001, which is the correct TC number.

"""